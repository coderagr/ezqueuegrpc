// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ezqueuegrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EzqueuedClient is the client API for Ezqueued service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EzqueuedClient interface {
	Create(ctx context.Context, in *CreateParams, opts ...grpc.CallOption) (*ReturnStatus, error)
	Enqueue(ctx context.Context, in *EnqueueParams, opts ...grpc.CallOption) (*ReturnStatus, error)
	Dequeue(ctx context.Context, in *DequeueParams, opts ...grpc.CallOption) (*QueueItem, error)
	Peek(ctx context.Context, in *PeekParams, opts ...grpc.CallOption) (*QueueItem, error)
}

type ezqueuedClient struct {
	cc grpc.ClientConnInterface
}

func NewEzqueuedClient(cc grpc.ClientConnInterface) EzqueuedClient {
	return &ezqueuedClient{cc}
}

func (c *ezqueuedClient) Create(ctx context.Context, in *CreateParams, opts ...grpc.CallOption) (*ReturnStatus, error) {
	out := new(ReturnStatus)
	err := c.cc.Invoke(ctx, "/Ezqueued/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ezqueuedClient) Enqueue(ctx context.Context, in *EnqueueParams, opts ...grpc.CallOption) (*ReturnStatus, error) {
	out := new(ReturnStatus)
	err := c.cc.Invoke(ctx, "/Ezqueued/Enqueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ezqueuedClient) Dequeue(ctx context.Context, in *DequeueParams, opts ...grpc.CallOption) (*QueueItem, error) {
	out := new(QueueItem)
	err := c.cc.Invoke(ctx, "/Ezqueued/Dequeue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ezqueuedClient) Peek(ctx context.Context, in *PeekParams, opts ...grpc.CallOption) (*QueueItem, error) {
	out := new(QueueItem)
	err := c.cc.Invoke(ctx, "/Ezqueued/Peek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EzqueuedServer is the server API for Ezqueued service.
// All implementations must embed UnimplementedEzqueuedServer
// for forward compatibility
type EzqueuedServer interface {
	Create(context.Context, *CreateParams) (*ReturnStatus, error)
	Enqueue(context.Context, *EnqueueParams) (*ReturnStatus, error)
	Dequeue(context.Context, *DequeueParams) (*QueueItem, error)
	Peek(context.Context, *PeekParams) (*QueueItem, error)
	mustEmbedUnimplementedEzqueuedServer()
}

// UnimplementedEzqueuedServer must be embedded to have forward compatible implementations.
type UnimplementedEzqueuedServer struct {
}

func (UnimplementedEzqueuedServer) Create(context.Context, *CreateParams) (*ReturnStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEzqueuedServer) Enqueue(context.Context, *EnqueueParams) (*ReturnStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedEzqueuedServer) Dequeue(context.Context, *DequeueParams) (*QueueItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dequeue not implemented")
}
func (UnimplementedEzqueuedServer) Peek(context.Context, *PeekParams) (*QueueItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Peek not implemented")
}
func (UnimplementedEzqueuedServer) mustEmbedUnimplementedEzqueuedServer() {}

// UnsafeEzqueuedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EzqueuedServer will
// result in compilation errors.
type UnsafeEzqueuedServer interface {
	mustEmbedUnimplementedEzqueuedServer()
}

func RegisterEzqueuedServer(s grpc.ServiceRegistrar, srv EzqueuedServer) {
	s.RegisterService(&Ezqueued_ServiceDesc, srv)
}

func _Ezqueued_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EzqueuedServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ezqueued/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EzqueuedServer).Create(ctx, req.(*CreateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ezqueued_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EzqueuedServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ezqueued/Enqueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EzqueuedServer).Enqueue(ctx, req.(*EnqueueParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ezqueued_Dequeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DequeueParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EzqueuedServer).Dequeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ezqueued/Dequeue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EzqueuedServer).Dequeue(ctx, req.(*DequeueParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ezqueued_Peek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeekParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EzqueuedServer).Peek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ezqueued/Peek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EzqueuedServer).Peek(ctx, req.(*PeekParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Ezqueued_ServiceDesc is the grpc.ServiceDesc for Ezqueued service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ezqueued_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ezqueued",
	HandlerType: (*EzqueuedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Ezqueued_Create_Handler,
		},
		{
			MethodName: "Enqueue",
			Handler:    _Ezqueued_Enqueue_Handler,
		},
		{
			MethodName: "Dequeue",
			Handler:    _Ezqueued_Dequeue_Handler,
		},
		{
			MethodName: "Peek",
			Handler:    _Ezqueued_Peek_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ezqueuegrpc.proto",
}
